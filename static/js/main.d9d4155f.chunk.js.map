{"version":3,"sources":["css.module.css","Components/Header/css.module.css","Components/Header/Counter/css.module.css","Components/Header/Buttons/css.module.css","Components/Header/Vectors/css.module.css","Components/Footer/css.module.css","Components/Settings/css.module.css","Components/Settings/Value_selection/css.module.css","Components/Settings/Color_selection/css.module.css","Components/Header/Counter/Counter.tsx","Components/Button/Button.tsx","Components/Header/Buttons/Buttons_Start_Stop.tsx","Components/Header/Vectors/Vectors.tsx","Components/Header/Header.tsx","Components/Footer/Footer.tsx","Components/Settings/Value_selection/Value_selection.tsx","Components/Settings/Color_selection/Color_selection.tsx","Components/Settings/Settings.tsx","App.tsx","render.js","State/state.tsx","index.tsx"],"names":["module","exports","Counter","props","color","className","style","error","value","Button","height","width","borderRadius","backgroundColor","zero","onClick","id","disabled","content","Buttons_Start_Stop","fucntion","main","buttons_Start_Reset","map","button","AddValueCounter","ResetCounter","Vectors","startvalue","maxvalue","Header","value_counter","Footer","ValueSelection","max","start","onChange","event","String","currentTarget","UpdateMaxValue","ChangeMaxValue","newMaxValue","ChangeStartValue","newStartValue","ColorSelection","buttons_color","ChangeColorValue","Settings","App","useState","setStart","setMax","setValue","setColor","setError","chislo","Number","state","shift","unshift","rerenderEntireTree","selectedcolor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d9d4155f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"css_App__1Oq1a\",\"Footer\":\"css_Footer__1E3VD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Vectors\":\"css_Vectors__14UYc\",\"Buttons\":\"css_Buttons__32wLK\",\"Header\":\"css_Header__2-bnd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Counter\":\"css_Counter__1aSYk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"css_main__3Tk6T\",\"test1\":\"css_test1__3GQ16\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"css_main__uGcuN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Footer\":\"css_Footer__s_Vzk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"css_main__1_LUq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"css_main__3ABub\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"css_main__2Y1QG\"};","import React, {useState} from 'react';\r\nimport style from './css.module.css';\r\n\r\n\r\ntype CounterType =\r\n    {\r\n        color:string\r\n        value:string\r\n        error:boolean\r\n    }\r\nfunction Counter(props:CounterType) {\r\n    let colorError = {\r\n        color: \"red\"\r\n    }\r\n    let color = {\r\n        color:props.color,\r\n    }\r\n    return(\r\n        <div className={style.Counter}>\r\n            {props.error && <span style={colorError}>{props.value}</span> || <span style={color}>{props.value}</span>}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Counter;\r\n","import React,{ChangeEvent} from 'react';\r\nimport style from './css.module.css';\r\n////// False - Квадрат\r\n////// True - Круг\r\n\r\nexport type ButtonType =\r\n    {\r\n        height:string,\r\n        width:string,\r\n        borderRadius?:string,\r\n        backgroundColor?:string,\r\n        content?: string;\r\n        onClick?: () => void\r\n        disabled?: boolean\r\n        id?: string\r\n    }\r\n\r\n\r\nfunction Button(props: ButtonType) {\r\n    let style = {\r\n        height: props.height,\r\n        width: props.width,\r\n        borderRadius: props.borderRadius,\r\n        backgroundColor: props.backgroundColor,\r\n    }\r\n\r\n    let zero = () => {}\r\n    if (props.onClick) zero = props.onClick\r\n\r\n\r\n    return (\r\n        <button id={props.id} onClick={zero} style={style} disabled={props.disabled} value={style.backgroundColor} >\r\n            {props.content}\r\n        </button>\r\n\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default Button;\r\n","import React, {useState} from 'react';\r\nimport style from './css.module.css';\r\nimport Button from \"../../Button/Button\";\r\nimport {buttons_Start_ResetType} from \"../../../State/state\";\r\n\r\n\r\ntype Buttons_Start_StopType =\r\n    {\r\n        AddValueCounter: () => void\r\n        ResetCounter:() => void\r\n        buttons_Start_Reset:Array<buttons_Start_ResetType>\r\n    }\r\n\r\n\r\nfunction Buttons_Start_Stop(props:Buttons_Start_StopType) {\r\n    let fucntion = () => {}\r\n\r\n\r\n    return(\r\n        <div className={style.main}>\r\n            {props.buttons_Start_Reset.map(button =>\r\n            {\r\n                if (button.id === \"1\") fucntion = props.AddValueCounter\r\n                else  fucntion = props.ResetCounter\r\n                return <Button height={button.height} width={button.width}\r\n                               backgroundColor={button.backgroundColor} content={button.content}\r\n                               borderRadius={button.borderRadius} onClick={fucntion} disabled={button.disabled}\r\n                />\r\n            }\r\n            )}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Buttons_Start_Stop;\r\n","import React, {useState} from 'react';\r\nimport style from './css.module.css';\r\n\r\n\r\ntype VectorsType =\r\n    {\r\n        color:string\r\n        startvalue:string\r\n        maxvalue: string\r\n    }\r\nfunction Vectors(props:VectorsType) {\r\n    return(\r\n        <div className={style.main}>\r\n            Текущие найстроки<br />\r\n            Значения старта: {props.startvalue}<br />\r\n            Макс. значение: {props.maxvalue}<br />\r\n            Выбраный цвет:{props.color}<br />\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Vectors;\r\n","import React from 'react';\r\nimport style from './css.module.css';\r\nimport Counter from \"./Counter/Counter\";\r\nimport Button, {ButtonType} from \"../Button/Button\";\r\nimport Buttons_Start_Stop from \"./Buttons/Buttons_Start_Stop\";\r\nimport Vectors from \"./Vectors/Vectors\";\r\nimport {buttons_Start_ResetType} from \"../../State/state\";\r\n\r\n\r\nexport type HeaderType =\r\n    {\r\n        error: boolean\r\n        AddValueCounter: () => void,\r\n        ResetCounter:() => void,\r\n        value_counter:string,\r\n        buttons_Start_Reset:Array<buttons_Start_ResetType>\r\n        color:string\r\n        startvalue:string\r\n        maxvalue: string\r\n    }\r\nfunction Header(props:HeaderType) {\r\n    return(\r\n        <div className={style.Header}>\r\n            <Vectors startvalue={props.startvalue} maxvalue={props.maxvalue} color={props.color}/>\r\n            <Counter value={props.value_counter} color={props.color} error={props.error}/>\r\n            <Buttons_Start_Stop AddValueCounter={props.AddValueCounter} ResetCounter={props.ResetCounter}\r\n                                buttons_Start_Reset={props.buttons_Start_Reset}/>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport style from './css.module.css';\r\nimport Button from \"../Button/Button\";\r\n\r\n\r\ntype FooterType =\r\n    {\r\n    }\r\nfunction Footer(props:FooterType) {\r\n    return(\r\n        <div className={style.Footer}>\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Footer;\r\n","import React, {ChangeEvent} from 'react';\r\nimport style from './css.module.css';\r\nimport Button from \"../../Button/Button\";\r\n\r\n\r\ntype ValueSelectionType =\r\n    {\r\n        ChangeStartValue: (startvalue: string) => void\r\n        ChangeMaxValue: (maxvalue: string) => void\r\n        newMaxValue: string,\r\n        newStartValue: string,\r\n        UpdateMaxValue: (maxvalue:string) => void\r\n    }\r\n\r\nfunction ValueSelection(props: ValueSelectionType) {\r\n    let max = \"\"\r\n    let start = \"\"\r\n\r\n    function OnChangeMaxValue(event: ChangeEvent<HTMLInputElement>) {\r\n        max = String(event.currentTarget.value)\r\n        props.UpdateMaxValue(max)\r\n        props.ChangeMaxValue(max)\r\n    }\r\n\r\n    function OnChangeStartValue(event: ChangeEvent<HTMLInputElement>) {\r\n        start = String(event.currentTarget.value)\r\n\r\n    }\r\n\r\n    function SentValue() {\r\n        props.ChangeMaxValue(max)\r\n        props.ChangeStartValue(start)\r\n    }\r\n\r\n    return (\r\n        <div className={style.main}>\r\n            Введите максимальное значение <input onChange={OnChangeMaxValue} value={props.newMaxValue}/>\r\n            <Button height={\"50px\"} width={\"100px\"} content={\"Потвердить\"} onClick={SentValue}/>\r\n            Введите Значение старта <input onChange={OnChangeStartValue} value={props.newStartValue}/>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default ValueSelection;\r\n","import React from 'react';\r\nimport style from './css.module.css';\r\nimport Button from \"../../Button/Button\";\r\nimport {buttons_colorType} from \"../../../State/state\";\r\n\r\n\r\ntype ColorSelectionType =\r\n    {\r\n        ChangeColorValue:(colorSelection:string) => void\r\n        buttons_color:Array<any>\r\n    }\r\nfunction ColorSelection(props:ColorSelectionType) {\r\n\r\n\r\n    return(<div className={style.main}>\r\n            Выберите цвет цифр из предложенной ниже палитры\r\n            {props.buttons_color.map(button =>\r\n                {\r\n                    function color() {\r\n                        props.ChangeColorValue(button.backgroundColor)\r\n                    }\r\n                    return <Button id={button.id} height={button.height} width={button.width}\r\n                                   backgroundColor={button.backgroundColor}  onClick={color}\r\n                    />\r\n                }\r\n            )}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default ColorSelection;\r\n","import React from 'react';\r\nimport style from './css.module.css';\r\nimport ValueSelection from \"./Value_selection/Value_selection\";\r\nimport ColorSelection from \"./Color_selection/Color_selection\";\r\nimport {buttons_colorType} from \"../../State/state\";\r\n\r\n\r\n export type SettingsType =\r\n    {\r\n        ChangeStartValue:(startvalue:string) => void\r\n        ChangeColorValue:(colorSelection:string) => void\r\n        ChangeMaxValue:(maxvalue:string) => void\r\n        buttons_color:Array<any>\r\n        newMaxValue : string,\r\n        newStartValue : string,\r\n        UpdateMaxValue: (maxvalue:string) => void\r\n    }\r\nfunction Settings(props:SettingsType) {\r\n    return(\r\n        <div className={style.main}>\r\n            <ValueSelection ChangeStartValue={props.ChangeStartValue}\r\n                            ChangeMaxValue={props.ChangeMaxValue}\r\n                            newMaxValue={props.newMaxValue}\r\n                            newStartValue={props.newStartValue}\r\n                            UpdateMaxValue={props.UpdateMaxValue}\r\n            />\r\n            <ColorSelection ChangeColorValue={props.ChangeColorValue}\r\n                            buttons_color={props.buttons_color}/>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Settings;\r\n","import React, {useState} from 'react';\r\nimport style from './css.module.css';\r\nimport Header from \"./Components/Header/Header\";\r\n\r\nimport Footer from \"./Components/Footer/Footer\";\r\nimport Settings from \"./Components/Settings/Settings\";\r\nimport {rerenderEntireTree} from \"./render\";\r\n\r\n\r\ntype AppType =\r\n    {\r\n        state: any\r\n        UpdateMaxValue: (maxvalue:string) => void\r\n    }\r\n\r\nfunction App(props: AppType) {\r\n    let [start, setStart] = useState<string>(\"0\")\r\n    let [max, setMax] = useState<string>(\"5\")\r\n    let [value, setValue] = useState<string>(\"0\")\r\n    let [color, setColor] = useState<string>(\"white\")\r\n    let [error, setError] = useState<boolean>(false)\r\n\r\n    function AddValueCounter() {\r\n        let chislo = String(Number(value) + 1)\r\n        let disabled = {\r\n            id: \"1\", height: \"100px\", width: \"100px\", backgroundColor: \"green\",\r\n            content: \"start\", borderRadius: \"100%\", disabled: true\r\n        }\r\n        if (Number(chislo) === Number(max)) {\r\n            setError(true)\r\n            props.state.Header.buttons_Start_Reset.shift()\r\n            props.state.Header.buttons_Start_Reset.unshift(disabled)\r\n            rerenderEntireTree(props.state)\r\n        }\r\n        setValue(chislo)\r\n    }\r\n\r\n    function ResetCounter() {\r\n        let enabled = {\r\n            id: \"1\", height: \"100px\", width: \"100px\", backgroundColor: \"green\",\r\n            content: \"start\", borderRadius: \"100%\", disabled: false\r\n        }\r\n        props.state.Header.buttons_Start_Reset.shift()\r\n        props.state.Header.buttons_Start_Reset.unshift(enabled)\r\n        setValue(start)\r\n        setError(false)\r\n        rerenderEntireTree(props.state)\r\n    }\r\n\r\n    function ChangeMaxValue(maxvalue: string) {\r\n        if (Number(maxvalue) <= Number(value)) {\r\n            setValue(\"Ошибка ввода\")\r\n        } else setMax(maxvalue)\r\n\r\n\r\n    }\r\n\r\n    function ChangeStartValue(startvalue: string) {\r\n        if (Number(startvalue) <= -1) {\r\n            setValue(\"Ошибка ввода\")\r\n        } else\r\n            setStart(startvalue)\r\n    }\r\n\r\n    function ChangeColorValue(selectedcolor: string) {\r\n        setColor(selectedcolor)\r\n    }\r\n    function ChangeInput(maxvalue:string) {\r\n        if(Number(maxvalue) <= Number(value))\r\n        {\r\n            setValue(\"Ошибка ввода\")\r\n        }\r\n        else setMax(maxvalue)\r\n    }\r\n    return (\r\n        <div className={style.App}>\r\n            <Header error={error}\r\n                    value_counter={value}\r\n                    AddValueCounter={AddValueCounter}\r\n                    ResetCounter={ResetCounter}\r\n                    buttons_Start_Reset={props.state.Header.buttons_Start_Reset}\r\n                    color={color}\r\n                    startvalue={start}\r\n                    maxvalue={max}\r\n            />\r\n            <Settings ChangeStartValue={ChangeStartValue}\r\n                      ChangeColorValue={ChangeColorValue}\r\n                      ChangeMaxValue={ChangeMaxValue}\r\n                      UpdateMaxValue={props.UpdateMaxValue}\r\n                      newMaxValue={props.state.Settings.newMaxValue}\r\n                      newStartValue={props.state.Settings.newStartValue}\r\n                      buttons_color={props.state.Settings.buttons_color}\r\n            />\r\n            <Footer/>\r\n\r\n        </div>)\r\n\r\n\r\n}\r\n\r\nexport default App;\r\n","import ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport React from \"react\";\r\nimport {UpdateMaxValue} from \"./State/state\";\r\n\r\nexport let rerenderEntireTree = (state) =>\r\n{\r\n\tReactDOM.render(\r\n\t\t<App state={state} UpdateMaxValue={UpdateMaxValue}/>,\r\n\t\tdocument.getElementById('root'));\r\n}","import {rerenderEntireTree} from \"../render\";\r\n\r\n\r\nexport type StateType = {\r\n\tHeader : HeaderType,\r\n\tSettings : SettingsType\r\n}\r\ntype HeaderType = {\r\n\tbuttons_Start_Reset: Array<buttons_Start_ResetType>\r\n}\r\ntype SettingsType = {\r\n\tbuttons_Start_Reset: Array<buttons_colorType>\r\n}\r\nexport type buttons_Start_ResetType =\r\n\t{\r\n\t\tid:string,\r\n\t\theight: string,\r\n\t\twidth:string,\r\n\t\tbackgroundColor:string,\r\n\t\tcontent:string,\r\n\t\tborderRadius:string,\r\n\t\tdisabled:boolean,\r\n\t}\r\nexport type buttons_colorType =\r\n\t{\r\n\t\tid:string,\r\n\t\theight: string,\r\n\t\twidth:string,\r\n\t\tbackgroundColor:string,\r\n\t}\r\nexport let state = {\r\n\tHeader: {\r\n\t\tbuttons_Start_Reset: [\r\n\t\t\t{\r\n\t\t\t\tid: \"1\", height: \"100px\", width: \"100px\", backgroundColor: \"green\",\r\n\t\t\t\tcontent: \"start\", borderRadius: \"100%\", disabled: false\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tid: \"2\", height: \"100px\", width: \"100px\", backgroundColor: \"red\",\r\n\t\t\t\tcontent: \"reset\", borderRadius: \"100%\", disabled: false\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\tSettings: {\r\n\t\tbuttons_color: [\r\n\t\t\t{id: \"1\", height: \"50px\", width: \"50px\", backgroundColor: \"white\"},\r\n\t\t\t{id: \"2\", height: \"50px\", width: \"50px\", backgroundColor: \"orange\"},\r\n\t\t\t{id: \"2\", height: \"50px\", width: \"50px\", backgroundColor: \"blue\"},\r\n\t\t\t{id: \"2\", height: \"50px\", width: \"50px\", backgroundColor: \"black\"},\r\n\t\t\t{id: \"2\", height: \"50px\", width: \"50px\", backgroundColor: \"green\"},\r\n\t\t\t{id: \"2\", height: \"50px\", width: \"50px\", backgroundColor: \"yellow\"},\r\n\t\t\t{id: \"2\", height: \"50px\", width: \"50px\", backgroundColor: \"brown\"},\r\n\t\t\t{id: \"2\", height: \"50px\", width: \"50px\", backgroundColor: \"purple\"}\r\n\t\t],\r\n\t\tnewMaxValue: \"\",\r\n\t\tnewStartValue: \"\",\r\n\t}\r\n}\r\nexport const UpdateMaxValue = (maxvalue:string) => {\r\n\tstate.Settings.newMaxValue = maxvalue\r\n\trerenderEntireTree(state)\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport {state} from \"./State/state\";\r\nimport {rerenderEntireTree} from \"./render\";\r\n\r\n\r\nrerenderEntireTree(state)"],"sourceRoot":""}